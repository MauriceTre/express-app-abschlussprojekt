/**
 * The **GameEngine** fulfills two primary roles:
 *
 *  - It offers a centralized API that used by internal and external
 *    clients to inspect or act on the current game state.
 *
 *  - It implements the logic that drives the game itself -- evaluating
 *    whether achievements have been achieved, etc.
 *
 * The GameEngine is an `EventEmitter`, emitting events when an
 * event has occured or an achievement has been achieved.
 */
import type { Achievement, AchievementAchievedListener, Event, EventOccurredListener, GamePlayer, HistoryItem, Player } from './@types';
import { AchievementRule } from './AchievementRule';
import { DataStore } from './DataStore';
import { EventEmitter } from 'events';
interface GameEngineProps {
    /**
     * **datastore** -- A DataStore instance (defaults to `MemoryDataStore`)
     */
    datastore: DataStore;
    /**
     * **achievementRules** -- An array of achievement rules (default to empty array)
     */
    achievementRules: AchievementRule[];
    /**
     * **players** -- An array of players (default to empty array)
     */
    players: Player[];
}
type GAME_ENGINE_ACHIEVEMENT_ACHIEVED = 'achievement-achieved';
type GAME_ENGINE_EVENT_OCCURRED = 'event-occurred';
export declare class GameEngine extends EventEmitter {
    /**
     * `GameEngine.AGE_ACHIEVED` is the event type used when a player
     * has earned an achievement. The corresponding EventEmitter event
     * object will contain three properities:
     *
     * 1. `player` -- the player that earned this achievement
     * 2. `achievement` -- the achievement that was earned
     * 3. `engine` -- this GameEngine instance
     */
    private AGE_ACHIEVED;
    /**
     * `GameEngine.AGE_EVENT` is the event type used when an event has
     * occurred. The corresponding EventEmitter event object will contain
     * three properities:
     *
     * 1. `player` -- the player to which the event occurred
     * 2. `event` -- the event that occurred
     * 3. `engine` -- this GameEngine instance
     */
    private AGE_EVENT;
    private datastore;
    private achievementRules;
    private _on;
    /**
     * **GameEngine** constructor accepts two optional props.
     */
    constructor(props?: Partial<GameEngineProps>);
    /**
     * **`addPlayer`** ensures that a player object exists for the given `player`.
     * The `player` MUST have an `id` property.
     * @param player Player
     * @returns A function to remove the Player from the engine
     */
    addPlayer(player: Player): () => void;
    /**
     * **`addEvent`** reports that the given `event` occurred for the given `player`.
     *
     * This method will emit a `GameEngine.AGE_EVENT` message to any registered listeners.
     * @param player Player
     * @param event Event
     */
    addEvent<T = unknown>(player: Player, eventName: Event['name'], data?: T): void;
    /**
     * **`addAchievement`** reports that the given `player` achieved the specified `achievement`.
     *
     * This method will emit a `GameEngine.AGE_ACHIEVED` message to any registered listeners.
     * @param player Player
     * @param achievementName Achievement Name
     */
    private addAchievement;
    /**
     * **`addAchievementRule`** registers a new achievement rule with the GameEngine.
     * Subsequent invocations of `getPlayerAchievements` will evaluate the given
     * achievement rule.
     *
     * See the `AchievementRule` type for more details.
     * @param rule Achievement Rule
     * @returns A function to remove the Rule from the engine
     */
    addAchievementRule(rule: AchievementRule): () => void;
    /**
     * **`getPlayer`** will fetch the player object specified by `player.id`.
     * @param player Player
     * @returns GamePlayer
     */
    getPlayer(player: Player): GamePlayer | undefined;
    /**
     * **`getPlayerHistory`** returns an array of events experienced by the player with the given `player.id`.
     * By default this method simply invokes `.history` on the value obtained from `getPlayer`.
     * @param player Player
     * @returns Player History
     */
    getPlayerHistory(player: Player): HistoryItem[];
    /**
     * **`getPlayerAchievements`** returns an array of achievements achieved by the player with the given `player.id`.
     * By default this method simply invokes `.achievements` on the value obtained from `getPlayer`.
     * @param player Player
     * @returns Player Achievements
     */
    getPlayerAchievements(player: Player): Achievement[];
    /**
     * **`evaluateAchievementRule`** is a private utility method.
     * This method will evaluate the given `rule` for the given `player` by
     * parsing the keys in order to invoke the predicate for each key.
     * @param player Player
     * @param rule Achievement Rule
     */
    private evaluateAchievementRule;
    /**
     * **`evaluateSingleAchievement`** is a private utility method.
     * This method will evaluate the given `rule` for the given `player`
     * and make the requisite changes to the game state.
     * @param player Player
     * @param key Key
     * @param rule Achievement Rule
     */
    private evaluateSingleAchievement;
    on(type: GAME_ENGINE_ACHIEVEMENT_ACHIEVED, listener: AchievementAchievedListener): typeof this;
    on(type: GAME_ENGINE_EVENT_OCCURRED, listener: EventOccurredListener): typeof this;
    /**
     * **`listen`** An alias for `EventEmitter.on`
     */
    listen: {
        (type: GAME_ENGINE_ACHIEVEMENT_ACHIEVED, listener: AchievementAchievedListener): typeof this;
        (type: GAME_ENGINE_EVENT_OCCURRED, listener: EventOccurredListener): typeof this;
    };
    /**
     * **`addListener`** An alias for `EventEmitter.on`
     */
    addListener: {
        (type: GAME_ENGINE_ACHIEVEMENT_ACHIEVED, listener: AchievementAchievedListener): typeof this;
        (type: GAME_ENGINE_EVENT_OCCURRED, listener: EventOccurredListener): typeof this;
    };
    /**
     * **`addEventListener`** An alias for `EventEmitter.on`
     */
    addEventListener: {
        (type: GAME_ENGINE_ACHIEVEMENT_ACHIEVED, listener: AchievementAchievedListener): typeof this;
        (type: GAME_ENGINE_EVENT_OCCURRED, listener: EventOccurredListener): typeof this;
    };
    /**
     * **`dispatch`** An alias for `GameEngine.addEvent`
     */
    dispatch: <T = unknown>(player: Player, eventName: Event['name'], data?: T | undefined) => void;
    /**
     * **`dispatchEvent`** An alias for `GameEngine.addEvent`
     */
    dispatchEvent: <T = unknown>(player: Player, eventName: Event['name'], data?: T | undefined) => void;
    /**
     * **`trigger`** An alias for `GameEngine.addEvent`
     */
    trigger: <T = unknown>(player: Player, eventName: Event['name'], data?: T | undefined) => void;
    /**
     * **`triggerEvent`** An alias for `GameEngine.addEvent`
     */
    triggerEvent: <T = unknown>(player: Player, eventName: Event['name'], data?: T | undefined) => void;
}
export {};
