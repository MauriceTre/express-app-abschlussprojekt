"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataStore = void 0;
class DataStore {
    /**
     * **`makePlayer`** creates a new player object based on the given `data` object, must contain an `id`.
     * @param data An object containing the player id and any additional meta-data for the player
     * @returns GamePlayer
     */
    makePlayer(data) {
        return {
            id: data.id,
            achievements: [],
            history: [],
            data,
        };
    }
    /**
     * **`recordPlayer`** ensures that the datastore contains a player object for the specified `player` data
     * This method is not implemented in the base DataStore object. Subclasses must override and implement this method
     * @param player Player
     * @returns A function to remove the Player from the DataStore
     */
    recordPlayer(player) {
        throw new Error('Method not implemented.');
    }
    /**
     * **`recordEvent`** registers that the given `player` encountered the given `event`
     * This method is not implemented in the base DataStore object. Subclasses must override and implement this method
     * @param player Player
     * @param event Event
     */
    recordEvent(player, event) {
        throw new Error('Method not implemented.');
    }
    /**
     * **`recordAchievement`** registers that the given `player` achieved the `acheivement`
     * This method is not implemented in the base DataStore object. Subclasses must override and implement this method
     * @param player Player
     * @param achievement Achievement
     */
    recordAchievement(player, achievement) {
        throw new Error('Method not implemented.');
    }
    /**
     * **`getPlayer`** returns the player object for the player with the given `player.id`.
     * This method is not implemented in the base DataStore object. Subclasses must override and implement this method.
     * @param player Player
     * @returns GamePlayer
     */
    getPlayer(player) {
        throw new Error('Method not implemented.');
    }
    /**
     * **`getPlayerHistory`** returns an array of events experienced by the player with the given `player.id`.
     * By default this method simply invokes `.history` on the value obtained from `getPlayer`.
     * @param player Player
     * @returns Player History
     */
    getPlayerHistory(player) {
        var _a, _b;
        return (_b = (_a = this.getPlayer(player)) === null || _a === void 0 ? void 0 : _a.history) !== null && _b !== void 0 ? _b : [];
    }
    /**
     * **`getPlayerAchievements`** returns an array of achievements achieved by the player with the given `player.id`.
     * By default this method simply invokes `.achievements` on the value obtained from `getPlayer`.
     * @param player Player
     * @returns Player Achievements
     */
    getPlayerAchievements(player) {
        var _a, _b;
        return (_b = (_a = this.getPlayer(player)) === null || _a === void 0 ? void 0 : _a.achievements) !== null && _b !== void 0 ? _b : [];
    }
}
exports.DataStore = DataStore;
