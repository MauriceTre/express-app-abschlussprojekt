"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryDataStore = void 0;
/**
 * MemoryDataStore is a `DataStore` that stores the saved data as in-memory JavaScript objects.
 * It does not provide a persistence mechanism.
 */
const lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
const DataStore_1 = require("./DataStore");
class MemoryDataStore extends DataStore_1.DataStore {
    /**
     * **`MemoryDataStore`** constructor accepts no arguments.
     */
    constructor() {
        super();
        this.gameStates = {};
    }
    /**
     * See `DataStore.recordPlayer`
     */
    recordPlayer(player) {
        this.gameStates[player.id] = this.gameStates[player.id] || this.makePlayer(player);
        return () => {
            delete this.gameStates[player.id];
        };
    }
    /**
     * See `DataStore.recordEvent`
     */
    recordEvent(player, event) {
        var _a;
        this.gameStates[player.id] = this.gameStates[player.id] || this.makePlayer(player);
        (_a = this.gameStates[player.id]) === null || _a === void 0 ? void 0 : _a.history.push({
            timestamp: new Date(),
            event,
        });
    }
    /**
     * See `DataStore.recordAchievement`
     */
    recordAchievement(player, achievement) {
        var _a, _b;
        this.gameStates[player.id] = this.gameStates[player.id] || this.makePlayer(player);
        (_a = this.gameStates[player.id]) === null || _a === void 0 ? void 0 : _a.history.push({
            timestamp: achievement.achieved,
            achievement,
        });
        (_b = this.gameStates[player.id]) === null || _b === void 0 ? void 0 : _b.achievements.push(achievement);
    }
    /**
     * See `DataStore.getPlayer`
     */
    getPlayer(player) {
        return (0, lodash_clonedeep_1.default)(this.gameStates[player.id]);
    }
    /**
     * Not a guaranteed part of the DataStore interface
     */
    getPlayerIds() {
        return Object.keys(this.gameStates);
    }
}
exports.MemoryDataStore = MemoryDataStore;
